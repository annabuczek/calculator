{"version":3,"sources":["components/Button/Button.js","components/Keyboard/keyboardButtons.js","components/Keyboard/Keyboard.js","components/Input/Input.js","components/Output/Output.js","components/Header/Header.js","App.js","helpers/math.js","index.js"],"names":["Button","props","className","content","handleButtonClick","value","action","onClick","Keyboard","buttons","map","button","key","Input","input","finalInput","Output","output","Header","App","useState","setInput","setFinalInput","setOutput","currNum","setCurrNum","prevNum","setPrevNum","activeOperator","setActiveOperator","activePercent","setActivePercent","e","target","attributes","currNumRegex","RegExp","match","replace","indexOf","substr","percentValue","String","parseFloat","exp","result","math","formattedExp","_formatExpression","Math","round","Number","EPSILON","evaluate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9f94270.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.scss';\n\nconst Button = (props) => {\n  const {\n    className,\n    content,\n    handleButtonClick,\n    value,\n    action,\n  } = props;\n  return (\n    <button\n      className={`button ${className}`}\n      onClick={handleButtonClick}\n      value={value}\n      action={action}\n    >\n      {content}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  className: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n  handleButtonClick: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  action: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","export default [\n  {\n    className: 'button--gradient-dark',\n    content: '%',\n    action: 'percent',\n  },\n  {\n    className: 'button--gradient-dark',\n    content: '+/-',\n    action: 'toggle',\n  },\n  {\n    className: 'button--gradient-dark',\n    content: 'C',\n    action: 'clear',\n  },\n  {\n    className: 'button--accent1',\n    content: '/',\n    action: 'operator',\n  },\n  {\n    className: 'button--gradient-light',\n    content: '7',\n    action: 'num',\n  },\n  {\n    className: 'button--gradient-light',\n    content: '8',\n    action: 'num',\n  },\n  {\n    className: 'button--gradient-light',\n    content: '9',\n    action: 'num',\n  },\n  {\n    className: 'button--accent2',\n    content: 'x',\n    value: '*',\n    action: 'operator',\n  },\n  {\n    className: 'button--gradient-light',\n    content: '4',\n    action: 'num',\n  },\n  {\n    className: 'button--gradient-light',\n    content: '5',\n    action: 'num',\n  },\n  {\n    className: 'button--gradient-light',\n    content: '6',\n    action: 'num',\n  },\n  {\n    className: 'button--accent3',\n    content: '-',\n    action: 'operator',\n  },\n  {\n    className: 'button--gradient-light',\n    content: '1',\n    action: 'num',\n  },\n  {\n    className: 'button--gradient-light',\n    content: '2',\n    action: 'num',\n  },\n  {\n    className: 'button--gradient-light',\n    content: '3',\n    action: 'num',\n  },\n  {\n    className: 'button--accent4',\n    content: '+',\n    action: 'operator',\n  },\n  {\n    className: 'button--gradient-light',\n    content: '0',\n    action: 'num',\n  },\n  {\n    className: 'button--gradient-light',\n    content: ',',\n    value: '.',\n    action: 'comma',\n  },\n  {\n    className: 'button--expanded button--accent-strong',\n    content: '=',\n    action: 'evaluate',\n  },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button/Button';\nimport buttons from './keyboardButtons';\nimport './Keyboard.scss';\n\nconst Keyboard = (props) => {\n  const { handleButtonClick } = props;\n  return (\n    <div className=\"keyboard\">\n      {buttons.map((button) => {\n        const { className, content, action, value } = button;\n        return (\n          <Button\n            className={className}\n            content={content}\n            value={value || content}\n            action={action}\n            handleButtonClick={handleButtonClick}\n            key={`btn-${content}`}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nKeyboard.propTypes = {\n  handleButtonClick: PropTypes.func.isRequired,\n};\n\nexport default Keyboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Input.scss';\n\nconst Input = (props) => {\n  const { input, finalInput } = props;\n  return <div className=\"input\">{input || finalInput}</div>;\n};\n\nInput.propTypes = {\n  input: PropTypes.string.isRequired,\n  finalInput: PropTypes.string.isRequired,\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Output.scss';\n\nconst Output = (props) => {\n  return <div className=\"output\">{props.output}</div>;\n};\n\nOutput.propTypes = {\n  output: PropTypes.string.isRequired,\n};\n\nexport default Output;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Input from '../Input/Input';\nimport Output from '../Output/Output';\nimport './Header.scss';\n\nconst Header = (props) => {\n  const { input, output, finalInput } = props;\n  return (\n    <div className=\"header\">\n      <Input input={input} finalInput={finalInput} />\n      <Output output={output} />\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  input: PropTypes.string.isRequired,\n  finalInput: PropTypes.string.isRequired,\n  output: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport Keyboard from './components/Keyboard/Keyboard';\nimport Header from './components/Header/Header';\nimport { evaluate } from './helpers/math';\nimport './App.scss';\n\nconst App = () => {\n  const [input, setInput] = useState('');\n  const [finalInput, setFinalInput] = useState('');\n  const [output, setOutput] = useState('0');\n  const [currNum, setCurrNum] = useState('');\n  const [prevNum, setPrevNum] = useState('');\n  const [activeOperator, setActiveOperator] = useState(false);\n  const [activePercent, setActivePercent] = useState(false);\n\n  const handleButtonClick = (e) => {\n    const value = e.target.value;\n    const action = e.target.attributes.action.value;\n    const currNumRegex = new RegExp(`${currNum}$`);\n\n    if (output !== '0') {\n      setOutput('0');\n      setFinalInput('');\n    }\n\n    switch (action) {\n      case 'num':\n        if (currNum === '0' || activePercent) {\n          setCurrNum(value);\n        } else {\n          setCurrNum(currNum + value);\n        }\n\n        if (!!input.match(/(\\s|^)0$/)) {\n          setInput(input.replace(/0$/, value));\n        } else if (activePercent) {\n          setInput(input.replace(currNumRegex, value));\n        } else {\n          setInput(input + value);\n        }\n\n        setActiveOperator(false);\n        setActivePercent(false);\n        break;\n      case 'comma':\n        if (!currNum) {\n          setCurrNum('0' + value);\n          setInput(input + '0' + value);\n        } else if (currNum.indexOf('.') === -1) {\n          setCurrNum(currNum + value);\n          setInput(input + value);\n        }\n\n        setActiveOperator(false);\n        break;\n      case 'toggle':\n        if (currNum.indexOf('-') === -1) {\n          setCurrNum('-' + currNum);\n          setInput(input.replace(currNumRegex, `-${currNum}`));\n        } else {\n          setCurrNum(currNum.substr(1));\n          setInput(input.replace(currNumRegex, currNum.substr(1)));\n        }\n\n        setActiveOperator(false);\n        break;\n      case 'operator':\n        if (!input || input === '-') {\n          break;\n        }\n\n        setCurrNum('');\n        if (activeOperator) {\n          setInput(input.replace(/(\\+|-|\\/|\\*)\\s$/, `${value} `));\n        } else {\n          setInput(input + ' ' + value + ' ');\n          setPrevNum(currNum);\n        }\n\n        setActiveOperator(true);\n        setActivePercent(false);\n        break;\n      case 'percent':\n        if (!currNum) {\n          break;\n        }\n\n        let percentValue;\n        if (!prevNum) {\n          percentValue = String(parseFloat(currNum) / 100);\n          setCurrNum(percentValue);\n          setInput(input.replace(currNumRegex, percentValue));\n        } else {\n          percentValue = String(\n            parseFloat(prevNum) * (parseFloat(currNum) / 100),\n          );\n          setCurrNum(percentValue);\n          setInput(input.replace(currNumRegex, percentValue));\n        }\n\n        setActivePercent(true);\n        break;\n      case 'evaluate':\n        if (output !== '0' || !input) {\n          break;\n        }\n        setOutput(evaluate(input));\n        setFinalInput(input);\n\n        setInput('');\n        setCurrNum('');\n        setPrevNum('');\n        setActiveOperator(false);\n        setActivePercent(false);\n        break;\n      case 'clear':\n        setInput('');\n        setFinalInput('');\n        setOutput('0');\n        setCurrNum('');\n        setPrevNum('');\n        setActiveOperator(false);\n        setActivePercent(false);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"calculator\">\n      <Header input={input} output={output} finalInput={finalInput} />\n      <Keyboard handleButtonClick={handleButtonClick} />\n    </div>\n  );\n};\n\nexport default App;\n","import * as math from 'mathjs';\n\nconst ROUND_NUM = 10000000000;\n\nconst _formatExpression = (exp) => {\n  let formattedExp = exp;\n\n  if (!!exp.match(/\\s(\\+|-|\\/|\\*)\\s$/)) {\n    formattedExp = exp.replace(/\\s(\\+|-|\\/|\\*)\\s$/, '');\n  }\n  return formattedExp;\n};\n\nexport const evaluate = (exp) => {\n  let result;\n\n  result = math.evaluate(_formatExpression(exp));\n  result =\n    Math.round((result + Number.EPSILON) * ROUND_NUM) / ROUND_NUM;\n\n  return String(result);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}